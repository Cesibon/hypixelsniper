{"version":3,"sources":["components/Grid.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["navigator","permissions","query","name","then","result","state","Grid","firstCellRenderer","params","onClick","clipboard","writeText","data","uuid","className","style","textAlign","frameworkComponents","this","defaultColDef","sortable","resizable","filter","filterParams","buttons","suppressDragLeaveHidesColumns","rowData","props","onGridReady","bind","cellRenderer","width","headerName","field","cellClass","valueFormatter","currencyFormatter","formatNumber","value","number","Math","floor","toString","replace","skipHeader","columnApi","allColumnIds","columns","getAllColumns","forEach","column","colDef","push","getId","autoSizeColumns","setState","gridApi","api","autoSizeAll","Component","App","update","fetching","createRef","loop","setInterval","fetchData","position","bottom","right","padding","type","id","onChange","htmlFor","a","console","log","axios","get","res","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54a5ee91.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\r\n\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-alpine-dark.css';\r\n\r\n\r\nnavigator.permissions.query({ name: \"clipboard-write\" }).then(result => {\r\n    if (result.state == \"granted\" || result.state == \"prompt\") {\r\n        /* write to the clipboard now */\r\n\r\n    }\r\n});\r\n\r\nexport default class Grid extends Component {\r\n\r\n    firstCellRenderer = (params) => {\r\n        return <span>\r\n            <button onClick={() => {\r\n                navigator.clipboard.writeText('/viewauction ' + params.data.uuid)\r\n            }}>Copy link</button>\r\n        </span>\r\n    }\r\n\r\n\r\n    render() {\r\n        const defaultColDef = {\r\n            sortable: true,\r\n            resizable: true,\r\n            filter: 'agTextColumnFilter',\r\n            filterParams: { buttons: ['reset'] }\r\n        };\r\n\r\n        return (\r\n            <div className=\"flex h-full\">\r\n                <div className=\"ag-theme-alpine-dark flex-grow\" style={{ textAlign: 'left' }}>\r\n                    <AgGridReact\r\n                        frameworkComponents={{\r\n                            firstCellRenderer: this.firstCellRenderer\r\n                        }}\r\n                        defaultColDef={defaultColDef}\r\n                        suppressDragLeaveHidesColumns={true}\r\n                        rowData={this.props.rowData}\r\n                        onGridReady={this.onGridReady.bind(this)}>\r\n                        <AgGridColumn\r\n                            cellRenderer=\"firstCellRenderer\"\r\n                            sortable={false}\r\n                            resizable={false}\r\n                            width=\"100\"></AgGridColumn>\r\n                        <AgGridColumn headerName=\"Name\" field='name'></AgGridColumn>\r\n                        <AgGridColumn headerName=\"Price\" field='price' cellClass='number-cell' filter=\"agNumberColumnFilter\" valueFormatter={this.currencyFormatter.bind(this)}></AgGridColumn>\r\n                        <AgGridColumn headerName=\"Next price\" field='next_price' cellClass='number-cell' filter=\"agNumberColumnFilter\" valueFormatter={this.currencyFormatter.bind(this)}></AgGridColumn>\r\n                        <AgGridColumn headerName=\"Spread\" field='price_float' cellClass='number-cell' filter=\"agNumberColumnFilter\" valueFormatter={this.currencyFormatter.bind(this)}></AgGridColumn>\r\n                        <AgGridColumn headerName=\"Item count\" field='count' filter=\"agNumberColumnFilter\"></AgGridColumn>\r\n                    </AgGridReact>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    currencyFormatter(params) {\r\n        return '$' + this.formatNumber(params.value);\r\n    }\r\n\r\n    formatNumber(number) {\r\n        // this puts commas into the number eg 1000 goes to 1,000,\r\n        // i pulled this from stack overflow, i have no idea how it works\r\n        return Math.floor(number)\r\n            .toString()\r\n            .replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\r\n    }\r\n\r\n    autoSizeAll(skipHeader = false) {\r\n        if (this.state.columnApi) {\r\n            const allColumnIds = [];\r\n            const columns = this.state.columnApi.getAllColumns()\r\n            if (columns) columns.forEach((column) => {\r\n                if (column.colDef.resizable) allColumnIds.push(column.getId());\r\n            });\r\n            this.state.columnApi.autoSizeColumns(allColumnIds, skipHeader);\r\n        }\r\n    }\r\n\r\n    onGridReady(params) {\r\n        // or setState if using components\r\n        this.setState({\r\n            gridApi: params.api,\r\n            columnApi: params.columnApi\r\n        })\r\n        this.autoSizeAll();\r\n    }\r\n}\r\n","\nimport { Component, createRef } from 'react';\nimport axios from 'axios'\nimport Grid from './components/Grid'\n\nimport './styles/App.css'\n\n\nexport default class App extends Component {\n    timeInterval\n    constructor(props){\n        super(props)\n        this.state = {\n            data: [],\n            update: false\n        }\n        \n        this.fetching = false\n        this.update = createRef()\n\n        this.loop = setInterval(this.fetchData.bind(this), 10000)\n    }\n    render() {\n        \n        return (\n            <div className=\"App\">\n                <Grid rowData={this.state.data} ></Grid>\n                <span className=\"bg-light\" style={{position: 'absolute', bottom: '0px', right: '20px', padding: '2px'}}>\n                    <input type=\"checkbox\" name=\"update\" id=\"update\" onChange={() => this.setState({update: !this.state.update})} /> \n                    <label htmlFor=\"update\">Auto update</label>\n                </span>\n            </div>\n        )\n    }\n\n\n    async fetchData() {\n        if(!this.state.update) return\n\n        console.log('Fetching data...')\n\n        this.fetching = true\n        const res = await axios.get('/data')\n        this.fetching = false\n\n        console.log(res)\n\n        this.setState({data: res.data})\n    }\n}\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}